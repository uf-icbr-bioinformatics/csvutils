#!/usr/bin/env python

import sys
import csv

"""
asIs   firstCol    wantedCol
T      any         any           return whole line
F      F           F             return whole line minus first col
F      T           F             return first col only (not needed: use -c 1)
F      F           T             return wanted col only
F      T           T             return first col and wanted col

-F     get first column from first file, skip it in all other files
-c C   get column C only from each file

"""

class Reader(object):
    filename = ""
    asIs = True
    firstCol = False
    wantedCol = -1
    done = False
    stream = None
    reader = None
    blank = ""

    def __init__(self, filename):
        self.filename = filename

    def initialize(self):
        #print("{} / {} / {} / {}".format(self.filename, self.asIs, self.firstCol, self.wantedCol))
        self.stream = open(self.filename, "r")
        self.reader = csv.reader(self.stream, delimiter='\t')
        r1 = next(self.reader)
        nf = len(r1)
        self.stream.seek(0)
        if self.asIs:
            self.blank = "\t"*(nf - 1)
        else:
            if self.firstCol:
                if self.wantedCol > -1:
                    self.blank = "\t"
            else:
                if self.wantedCol == -1:
                    self.blank = "\t"*(nf - 2)
            
    def close(self):
        self.done = True
        self.stream.close()

    def getline(self):
        if self.done:
            return self.blank
        line = self.stream.readline().rstrip("\r\n")
        if not line:
            self.close()
            self.done = True
            return self.blank
        if self.asIs:
            return line
        row = line.split("\t")
        if self.firstCol:
            if self.wantedCol > -1:
                return row[0] + "\t" + row[self.wantedCol]
            else:
                return row[0]
        else:
            if self.wantedCol > -1:
                return row[self.wantedCol]
            else:
                return "\t".join(row[1:])

class MultiReader(object):
    readers = []
    outfile = "/dev/stdout"
    wantedCol = -1
    firstCol = False

    def __init__(self):
        self.readers = []

    def parseArgs(self, args):
        if "-h" in args or "--help" in args:
            return False
        filenames = []
        prev = ""
        for a in args:
            if prev == "-c":
                self.wantedCol = int(a) - 1
                prev = ""
            elif prev == "-o":
                self.outfile = a
                prev = ""
            elif a in ["-c", "-o"]:
                prev = a
            elif a == "-F":
                self.firstCol = True
            else:
                filenames.append(a)

        for f in filenames:
            self.readers.append(Reader(f))

        if self.wantedCol > -1:
            for r in self.readers:
                r.asIs = False
                r.wantedCol = self.wantedCol

        if self.firstCol:
            r0 = self.readers[0]
            r0.firstCol = True
            if self.wantedCol == -1:
                for r in self.readers[1:]:
                    r.asIs = False

#        if self.firstCol:
#            if self.wantedCol > -1:
#                r0.asIs = False
#                r0.firstCol = True
#                r0.wantedCol = self.wantedCol
#            else:
#                pass            # r0 is asIs

        for r in self.readers:
            r.initialize()

        return self.readers

    def run(self):
        with open(self.outfile, "w") as out:
            while True:
                line = [ R.getline() for R in self.readers ]
                #print(line)
                #print([R.done for R in self.readers])
                if all([R.done for R in self.readers]):
                    return
                #print line
                #raw_input()
                out.write("\t".join(line) + "\n")

def usage():
    sys.stdout.write("""pazte = improved paste

Usage: pazte [options] filenames...

where options are:

  -o O | write output to file O (default: standard output)
  -c C | output column C from each file only (default: all columns)
  -F   | take first column from first file only

Examples:

  pazte f1 f2           Output all columns of file f1 followed by all columns of file f2.

  pazte -F f1 f2        Output all columns of file f1 followed by all columns except the 
                        first one from file f2.

  pazte -c 3 f1 f2      Output the third column of f1 and f2.

  pazte -F -c 3 f1 f2   Output the first and third columns of f1 followed bt the third
                        column of f2.

""")

if __name__ == "__main__":
    args = sys.argv[1:]
    M = MultiReader()
    if M.parseArgs(args):
        M.run()
    else:
        usage()
