#!/usr/bin/env python

#####
#
# kut - Spiced-up version of the cut(1) command.
#
####
__doc__ = "Spiced-up version of the cut(1) command."
__author__ = "Alberto Riva, UF ICBR Bioinformatics core, University of Florida"
__email__ = "ariva@ufl.edu"
__license__ = "GPL v3.0"
__copyright__ = "Copyright 2018, University of Florida Research Foundation"

import sys
import csv

def decodeDelimiter(d):
    if d == 'tab':
        return '\t'
    elif d == 'sp':
        return ' '
    elif d == 'nl':
        return '\n'
    else:
        return d

def splitRange(w):
    r = w.split("-")
    try:
        if r[0]:
            a = int(r[0]) - 1
        else:
            a = 0
        if r[1]:
            b = int(r[1]) - 1
        else:
            b = -1
        return (a, b)
    except ValueError:
        return None
    
class Kutter():
    infiles = []
    columns = []
    reverse = False             # If true, columns contains columns to be skipped
    delimiter = '\t'
    outdelim = None
    quotechar = None
    missing = "???"
    ncols = 0

    _namesmode = False
    _colspecs = []
    _colsfile = ""

    def __init__(self):
        self.infiles = []
        self.columns = []

    def usage(self):
        sys.stdout.write("""kut - spiced-up version of the cut command.

Usage: kut [options] filenames...

This command extracts columns from the specified files (or standard input
if no filenames are specified) and prints them to standard output. Wanted 
columns are specified using the -f option, and are printed in the order in 
which they are specified (contrast this with the cut command, which always 
prints them in their original order).

Options:

 -f C1,...,Cn | Specifies wanted columns. See below for possible values for C.
 -F F         | Like -f, but read wanted columns from file F (one per line).
 -n           | Use column names (from first row in file) instead of numbers.
 -v           | Reverse mode: print only columns NOT specified by -f or -F.
 -d D         | Set delimiter to D (default: tab).
 -e E         | Set output delimited to E (default: same as -d).
 -q Q         | Set quote character to Q (default: None).
 -m M         | Use M in place of missing values, e.g. if a line is shorter 
                than the rest (default: '???').

Each column specification C can be:

 A column number (1-based).
 A range of the form p-q, meaning columns from p to q inclusive;
        if p is omitted it defaults to the first column;
        if q is omitted it defaults to the last column in the file (recomputed for each file).
 The string '-', interpreted as all columns in reverse order.
 An arbitrary string, inserted 'as-is' into the output.

Note that in a range p-q, p can be larger than q, and that columns
can be repeated. Also, the -f option can be specified more than once
for readability. Some examples, assuming that file test.csv has five columns:

kut -f 1,5,3 test.csv       # Columns 1, 5, and 3 in this order
kut -f 2-4 test.csv         # Columns 2, 3, and 4
kut -f -2 test.csv          # Columns 1 and 2
kut -f 2- test.csv          # Columns 2, 3, 4, and 5
kut -f 3-1 test.csv         # Columns 3, 2, and 1
kut -f 3-1,2-4 test.csv     # Columns 3, 2, 1, 2, 3, and 4.
kut -f 3-1 -f 2-4 test.csv  # Same as previous example.
kut -f - test.csv           # Columns 5, 4, 3, 2, and 1

If -n is supplied, columns can be specified using names instead of numbers. Column names are
read from the first line of the file. Column specifications work as described above, except 
that ranges are expressed using : instead of -. For example, if a file has five columns named
A, B, C, D, and E respectively:

kut -n -f A,E,C        # Columns A, E, and C in this order
kut -n -f B-D          # Columns B, C, and D.
kut -n -f C-A,B-D      # Columns C, B, A, B, C, and D.
kut -n -f C-A -f B-D   # Same as previous example.
kut -n -f :            # Columns E, D, C, B, and A.

A delimiter specification (for -d and -e) can be a single character,
or the special strings 'tab' (tab), 'sp' (one space), 'nl' (newline).
""")
        
    def parseColumns(self, a):
        for w in a.split(","):
            self.parseOneColumn(w)

    def parseColumnsFromFile(self, filename):
        with open(filename, "r") as f:
            for line in f:
                self.parseOneColumn(line.rstrip("\n\r"))

    def parseOneColumn(self, w):
        w = w.strip()
        if w == "-":
            self.columns.append((-1, 0))
        elif "-" in w:
            limits = splitRange(w)
            if limits:
                self.columns.append(limits)
        else:
            try:
                x = int(w)
                self.columns.append(x-1)
            except ValueError:
                self.columns.append(w)

    def parseColIndexes(self):
        if self._colsfile:
            self.parseColumnsFromFile(self._colsfile)
        else:
            for w in self._colspecs:
                self.parseOneColumn(w)

    def parseArgs(self, args):
        if "-h" in args or "--h" in args:
            return False
        prev = ""
        self.columns = []
        self._colspecs = []
        for a in args:
            if prev == "-f":
                for w in a.split(","):
                    if w:
                        self._colspecs.append(w)
                prev = ""
            elif prev == "-F":
                self._colsfile = a
                prev = ""
            elif prev == "-d":
                self.delimiter = decodeDelimiter(a)
                prev = ""
            elif prev == "-e":
                self.outdelim = decodeDelimiter(a)
                prev = ""
            elif prev == "-q":
                self.quotechar = a
                prev = ""
            elif prev == "-m":
                self.missing = a
                prev = ""
            elif a in ["-f", "-F", "-d", "-e", "-q", "-m"]:
                prev = a
            elif a == "-n":
                self._namesmode = True
            elif a == "-v":
                self.reverse = True
            else:
                self.infiles.append(a)
        if not self.outdelim:
            self.outdelim = self.delimiter
            
        if not self.infiles:
            self.infiles.append("/dev/stdin")

        if not self._namesmode:
            self.parseColIndexes()

        return True
        
    def describe(self):
        sys.stderr.write("""Columns: {}
Delimiter: {}
Quotechar: {}
Filenames: {}
""".format(self.columns, self.delimiter, self.quotechar, self.infiles))

    def realColumns(self):
        wcols = []
        ncols = self.rowlen - 1
        for c in self.columns:
            if type(c).__name__ == "tuple":
                (a, b) = c
                if a == -1:
                    a = ncols
                if b == -1:
                    b = ncols
                #print "a={}, b={}".format(a, b)
                if b > a:
                    for i in range(a, b+1):
                        wcols.append(i)
                else:
                    for i in range(a, b-1, -1):
                        wcols.append(i)
            else:
                wcols.append(c)
        return wcols

    def matches(self, i):
        """Returns True if `i' matches one of the wanted columns."""
        for c in self.columns:
            # sys.stderr.write(str(c) + "\n")
            if type(c).__name__ == "tuple":
                (a, b) = c
                if a == -1:
                    a = ncols
                if b == -1:
                    b = ncols
                if b < a:
                    (a, b) = (b, a)
                # sys.stderr.write("{} {} {}\n".format(a, i, b))
                if a <= i <= b:
                    return True
            else:
                if c == i:
                    return True
        return False
                    
    def revColumns(self):
        wcols = []
        ncols = self.rowlen - 1

        for c in range(self.rowlen):
            if not self.matches(c):
                wcols.append(c)
        return wcols

    def safeGetField(self, row, c):
        if type(c).__name__ == 'str':
            return c
        try:
            return row[c]
        except IndexError:
            return self.missing

    def getCol(self, name, cols):
        if name in cols:
            return cols[name]
        else:
            sys.stderr.write("Error: no column called `{}'.\n".format(name))
            sys.exit(1)

    def parseColNames(self, hdr):
        cols = {}
        idx = 0
        for h in hdr:
            cols[h] = idx
            idx += 1

        for spec in self._colspecs:
            if spec == ":":
                self.columns.append((-1, 0))
            elif ":" in spec:
                parts = spec.split(":")
                if parts[0]:
                    col1 = self.getCol(parts[0], cols)
                else:
                    col1 = 0
                if parts[1]:
                    col2 = self.getCol(parts[1], cols)
                else:
                    col2 = -1
                self.columns.append((col1, col2))
            else:
                self.columns.append(self.getCol(spec, cols))

    
    def readfile(self, f):
        wcolumns = None
        r = csv.reader(f, delimiter=self.delimiter, quotechar=self.quotechar)
        for row in r:
            if not wcolumns:
                if self._namesmode:
                    self.parseColNames(row)

                self.rowlen = len(row)
                if self.reverse:
                    wcolumns = self.revColumns()
                else:
                    wcolumns = self.realColumns()

            outrow = [self.safeGetField(row, c) for c in wcolumns]
            try:
                sys.stdout.write(self.outdelim.join(outrow) + "\n")
            except IOError:
                break

if __name__ == "__main__":
    K = Kutter()
    if K.parseArgs(sys.argv[1:]):
        for filename in K.infiles:
            K.wcolumns = None
            with open(filename, "r") as f:
                K.readfile(f)
    else:
        K.usage()
